@mixin link-default($color, $decoration) {
    &:link,
    &:visited,
    &:hover,
    &:active {
        color: $color;
        text-decoration: $decoration;
    }
}

@mixin clearfix {
    &::after {
        display: table;
        clear: both;
        content: "";
    }
}

@mixin visuallyhidden {
    overflow: hidden;
    position: absolute;
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    clip: rect(0 0 0 0);
    clip: rect(0, 0, 0, 0);
}

@mixin trbl($val) {
    top: $val;
    right: $val;
    bottom: $val;
    left: $val;
}

@mixin dragHandle {
    transition: all 0.15s ease-out;

    &:hover {
        background-color: $grey-d;
    }

    &:active {
        background-color: $grey-d;
    }

    &.is-disabled {
        pointer-events: none;
        visibility: hidden;
    }

    @include mq($until: navCollapse) {
        pointer-events: none;
        visibility: hidden;
    }
}

// Typography
@mixin font($preset) {
    @if $preset == title {
        font-size: 34px;
        line-height: 1.1176;
        text-transform: uppercase;
    }

    @if $preset == heading {
        font-size: 24px;
        line-height: 1.1667;
        text-transform: uppercase;
    }

    @if $preset == subHeading {
        font-size: 20px;
        line-height: 1.3;
        font-weight: 400;
    }

    @if $preset == body {
        font: normal 1rem/#{(24 / 16)} $font-family-sans-serif;
    }

    @if $preset == code {
        font: normal 0.875rem/#{(24 / 14)} $font-family-monospace;
    }

    @if $preset == navigation {
        font: normal 0.8125rem/#{(20 / 13)} $font-family-sans-serif;
    }

    @if $preset == caption {
        font: bold 0.6875rem/#{(20 / 11)} $font-family-sans-serif;
        letter-spacing: 0.075em;
        text-transform: uppercase;
    }
}

// Logical positioning
@mixin padding-inline($position, $amount) {
    @if $position == start {
        padding-left: $amount;
    }

    @if $position == end {
        padding-right: $amount;
    }
}

@mixin margin-inline($position, $amount) {
    @if $position == start {
        [dir="ltr"] & {
            margin-left: $amount;
        }
        [dir="rtl"] & {
            margin-right: $amount;
        }
        margin-inline-start: $amount;
    }

    @if $position == end {
        [dir="ltr"] & {
            margin-right: $amount;
        }
        [dir="rtl"] & {
            margin-left: $amount;
        }
        margin-inline-end: $amount;
    }
}

@mixin border-inline($position, $style) {
    @if $position == start {
        [dir="ltr"] & {
            border-left: $style;
        }
        [dir="rtl"] & {
            border-right: $style;
        }
        border-inline-start: $style;
    }

    @if $position == end {
        [dir="ltr"] & {
            border-right: $style;
        }
        [dir="rtl"] & {
            border-left: $style;
        }
        border-inline-end: $style;
    }
}

@mixin border-inline-color($position, $color) {
    @if $position == start {
        [dir="ltr"] & {
            border-left-color: $color;
        }
        [dir="rtl"] & {
            border-right-color: $color;
        }
        border-inline-start-color: $color;
    }

    @if $position == end {
        [dir="ltr"] & {
            border-right-color: $color;
        }
        [dir="rtl"] & {
            border-left-color: $color;
        }
        border-inline-end-color: $color;
    }
}

@mixin offset-inline($position, $value: 0) {
    @if $position == start {
        [dir="ltr"] & {
            left: $value;
        }
        [dir="rtl"] & {
            right: $value;
        }
        offset-inline-start: $value;
    }

    @if $position == end {
        [dir="ltr"] & {
            right: $value;
        }
        [dir="rtl"] & {
            left: $value;
        }
        offset-inline-end: $value;
    }
}

@mixin clearFixer() {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin box-clip()
{
    background-clip: border-box;
    box-sizing: border-box;
    background-origin: border-box;
}

@mixin clear-input()
{
    appearance: none;
    border: none;
    border-width: 0;
    border-radius: 0;
    outline: none;
    outline-width: 0;
    padding: 0;
}

@mixin transform-all( $speed )
{
    transition: all $speed cubic-bezier(0.470, 0.000, 0.745, 0.715);
}

@mixin box-shadow ( $x, $y, $blur, $spread, $color )
{
    box-shadow: $x $y $blur $spread $color;
}

@mixin box-shadow-inner ( $x, $y, $blur, $color )
{
    box-shadow: inset $x $y $blur $color;
}

/* ==========================================================================
Fluid type
========================================================================== */
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size)
{
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4
    {
        & {
            font-size: $min-font-size;

            @media screen and (min-width: $min-vw) {
                font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }

            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}

$min_width: 480px;
$max_width: 1680px;
$min_font: 16px;
$max_font: 18px;

html {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    @include fluid-type($min_width, $max_width, $min_font, $max_font);
}

/* ==========================================================================
Fluid size
========================================================================== */
@mixin fluid-size($attr, $min-screen, $max-screen, $min-width, $max-width)
{
    $u1: unit($min-screen);
    $u2: unit($max-screen);
    $u3: unit($min-width);
    $u4: unit($max-width);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4
    {
        & {
            #{$attr}: $min-width;

            @media screen and (min-width: $min-screen) {
                #{$attr}: calc(#{$min-width} + #{strip-unit($max-width - $min-width)} * ((100vw - #{$min-screen}) / #{strip-unit($max-screen - $min-screen)}));
            }

            @media screen and (min-width: $max-screen) {
                #{$attr}: $max-width;
            }
        }
    }
}

/* ==========================================================================
Inline SVG
========================================================================== */
@function str_replace($string, $search, $replace: '')
{
    $index: str-index($string, $search);
    @if $index
    {
        @return str-slice($string, 1, $index - 1) + $replace + str_replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@function url_encode($string)
{
    $map: (
    "%": "%25",
    "<": "%3C",
    ">": "%3E",
    " ": "%20",
    "!": "%21",
    "*": "%2A",
    "'": "%27",
    '"': "%22",
    "(": "%28",
    ")": "%29",
    ";": "%3B",
    ":": "%3A",
    "@": "%40",
    "&": "%26",
    "=": "%3D",
    "+": "%2B",
    "$": "%24",
    ",": "%2C",
    "/": "%2F",
    "?": "%3F",
    "#": "%23",
    "[": "%5B",
    "]": "%5D"
    );

    $new: $string;
    @each $search, $replace in $map {
        $new: str_replace($new, $search, $replace);
    }
    @return $new;
}

@function inline_svg( $string )
{
    @return url('data:image/svg+xml;charset=US-ASCII,#{url_encode($string)}');
}

/* ==========================================================================
Gradient mixin
========================================================================== */
@mixin linear_gradient( $direction, $color-stops... )
{
    @if is_direction( $direction ) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy_direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

@function is_direction($value)
{
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

    @return $is-keyword or $is-angle;
}

@function legacy_direction( $value )
{
    @if is_direction( $value ) == false {
        @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }

    $conversion-map: (
    to top : bottom,
    to top right : bottom left,
    to right top : left bottom,
    to right : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom : top,
    to bottom left : top right,
    to left bottom : right top,
    to left : right,
    to left top : right bottom,
    to top left : bottom right
    );

    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }

    @return 90deg - $value;
}
